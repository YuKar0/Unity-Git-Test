//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputController/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""InputKey"",
            ""id"": ""a61c957b-168d-4b49-98da-3574e3252f3b"",
            ""actions"": [
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""d922734c-56a7-4b93-bf55-c5a804321dfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""f9d50cb4-82a0-4579-b236-e45ce96b0ab8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""483ed9c5-aaf4-44db-a572-e5663eed148b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""206d5f5e-904d-4f3b-9d63-138f7a638329"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1907fc9-8718-490d-bf33-1589fc7a07f5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyInput"",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""733a46ba-3999-4ade-b0c3-982310fa1842"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyInput"",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a3bae6c-4449-4f72-87f1-98325e83b441"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyInput"",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf0c4fc9-8adb-4a90-bc41-3c83cbc30f42"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyInput"",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyInput"",
            ""bindingGroup"": ""KeyInput"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InputKey
        m_InputKey = asset.FindActionMap("InputKey", throwIfNotFound: true);
        m_InputKey_Q = m_InputKey.FindAction("Q", throwIfNotFound: true);
        m_InputKey_W = m_InputKey.FindAction("W", throwIfNotFound: true);
        m_InputKey_E = m_InputKey.FindAction("E", throwIfNotFound: true);
        m_InputKey_R = m_InputKey.FindAction("R", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputKey
    private readonly InputActionMap m_InputKey;
    private IInputKeyActions m_InputKeyActionsCallbackInterface;
    private readonly InputAction m_InputKey_Q;
    private readonly InputAction m_InputKey_W;
    private readonly InputAction m_InputKey_E;
    private readonly InputAction m_InputKey_R;
    public struct InputKeyActions
    {
        private @NewControls m_Wrapper;
        public InputKeyActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Q => m_Wrapper.m_InputKey_Q;
        public InputAction @W => m_Wrapper.m_InputKey_W;
        public InputAction @E => m_Wrapper.m_InputKey_E;
        public InputAction @R => m_Wrapper.m_InputKey_R;
        public InputActionMap Get() { return m_Wrapper.m_InputKey; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputKeyActions set) { return set.Get(); }
        public void SetCallbacks(IInputKeyActions instance)
        {
            if (m_Wrapper.m_InputKeyActionsCallbackInterface != null)
            {
                @Q.started -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnQ;
                @Q.performed -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnQ;
                @Q.canceled -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnQ;
                @W.started -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnW;
                @W.performed -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnW;
                @W.canceled -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnW;
                @E.started -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnE;
                @E.performed -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnE;
                @E.canceled -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnE;
                @R.started -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnR;
                @R.performed -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnR;
                @R.canceled -= m_Wrapper.m_InputKeyActionsCallbackInterface.OnR;
            }
            m_Wrapper.m_InputKeyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Q.started += instance.OnQ;
                @Q.performed += instance.OnQ;
                @Q.canceled += instance.OnQ;
                @W.started += instance.OnW;
                @W.performed += instance.OnW;
                @W.canceled += instance.OnW;
                @E.started += instance.OnE;
                @E.performed += instance.OnE;
                @E.canceled += instance.OnE;
                @R.started += instance.OnR;
                @R.performed += instance.OnR;
                @R.canceled += instance.OnR;
            }
        }
    }
    public InputKeyActions @InputKey => new InputKeyActions(this);
    private int m_KeyInputSchemeIndex = -1;
    public InputControlScheme KeyInputScheme
    {
        get
        {
            if (m_KeyInputSchemeIndex == -1) m_KeyInputSchemeIndex = asset.FindControlSchemeIndex("KeyInput");
            return asset.controlSchemes[m_KeyInputSchemeIndex];
        }
    }
    public interface IInputKeyActions
    {
        void OnQ(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnR(InputAction.CallbackContext context);
    }
}
